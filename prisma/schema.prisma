// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  password      String
  avatar        String?
  job           String?
  organization  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  members       Member[]
  assignees     Assignee[]
  projects      Project[]
  comments      Comment[]
  issues        Issue[]
  notifications Notification[]
}

model Project {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(50)
  descr         String?        @db.VarChar(200)
  repo          String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  User          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  lists         List[]
  members       Member[]
  sprints       Sprint[]
  notifications Notification[]
  issues        Issue[]
  isDeleted     Boolean        @default(false)
}

model Member {
  id        Int      @id @default(autoincrement())
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model List {
  id        Int      @id @default(autoincrement())
  name      String   @default("unnamed list")
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  issues    Issue[]
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model Sprint {
  id        Int          @id @default(autoincrement())
  name      String       @db.VarChar(50)
  order     Int
  startDate DateTime?
  endDate   DateTime?
  goal      String?      @db.VarChar(200)
  status    SprintStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  Project   Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  issues    Issue[]
}

model Issue {
  id            Int            @id @default(autoincrement())
  listOrder     Int?
  sprintOrder   Int?
  priority      Int
  type          Int
  summary       String         @db.VarChar(100)
  descr         String?        @db.LongText
  progress      Int            @default(0)
  dueDate       DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  List          List?          @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId        Int?
  Sprint        Sprint?        @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId      Int?
  Project       Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     Int
  User          User?          @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId    Int
  parentId      Int?
  parentIssue   Issue?         @relation("IssueSubIssues", fields: [parentId], references: [id], onDelete: Cascade)
  comments      Comment[]
  assignees     Assignee[]
  notifications Notification[]
  children      Issue[]        @relation("IssueSubIssues")
}

model Assignee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  descr     String   @db.VarChar(200)
  createdAt DateTime @default(now())
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   Int
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int
}

model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  message   String           @db.VarChar(200)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  userId    Int
  User      User             @relation(fields: [userId], references: [id])
  projectId Int?
  Project   Project?         @relation(fields: [projectId], references: [id])
  issueId   Int?
  Issue     Issue?           @relation(fields: [issueId], references: [id])
}

enum SprintStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
}

enum NotificationType {
  ASSIGNED_TO_ISSUE
  PROJECT_INVITE
  SPRINT_STARTED
  SPRINT_COMPLETED
}
