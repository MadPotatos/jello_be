// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  name         String?
  password     String
  avatar       String?
  job          String?
  organization String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  members      Member[]
  assignees    Assignee[]

  comments Comment[]

  notifications Notification[]
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50)
  descr     String?  @db.VarChar(200)
  repo      String?  @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  lists         List[]
  members       Member[]
  sprints       Sprint[]
  notifications Notification[]
  workitems     WorkItem[]
  isDeleted     Boolean        @default(false)
  productGoal   String?
  userStories   UserStory[]
}

model UserStory {
  id          Int             @id @default(autoincrement())
  title       String          @db.VarChar(100)
  description String?         @db.VarChar(255)
  status      UserStoryStatus @default(TO_DO)
  priority    Priority
  point       Int
  projectId   Int
  project     Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  Sprint      Sprint?         @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId    Int?
  tasks       WorkItem[]
}

enum UserStoryStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

model Member {
  id        Int      @id @default(autoincrement())
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  role      Role?
}

model List {
  id        Int        @id @default(autoincrement())
  name      String     @default("unnamed list")
  order     Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  workitems WorkItem[]
  Project   Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model Sprint {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(50)
  order       Int
  startDate   DateTime?
  endDate     DateTime?
  goal        String?      @db.VarChar(200)
  status      SprintStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  Project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  workitems   WorkItem[]
  userStories UserStory[]
}

model WorkItem {
  id             Int             @id @default(autoincrement())
  listOrder      Int?
  sprintOrder    Int?
  priority       Priority
  type           Type
  statusInSprint StatusInSprint?
  assignRole     Role?
  summary        String          @db.VarChar(100)
  descr          String?         @db.LongText
  progress       Int             @default(0)
  dueDate        DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  List           List?           @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId         Int?
  Sprint         Sprint?         @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId       Int?
  Project        Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      Int
  userStoryId    Int?
  UserStory      UserStory?      @relation(fields: [userStoryId], references: [id], onDelete: Cascade)

  parentId       Int?
  parentWorkItem WorkItem?      @relation("WorkItemSubWorkItems", fields: [parentId], references: [id], onDelete: Cascade)
  comments       Comment[]
  assignees      Assignee[]
  notifications  Notification[]
  children       WorkItem[]     @relation("WorkItemSubWorkItems")
}

model Assignee {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  User       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  WorkItems  WorkItem? @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  workItemId Int
}

model Comment {
  id         Int       @id @default(autoincrement())
  descr      String    @db.VarChar(200)
  createdAt  DateTime  @default(now())
  WorkItems  WorkItem? @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  workItemId Int
  User       User?     @relation(fields: [userId], references: [id])
  userId     Int
}

model Notification {
  id         Int              @id @default(autoincrement())
  type       NotificationType
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  userId     Int
  User       User             @relation(fields: [userId], references: [id])
  projectId  Int?
  Project    Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workItemId Int?
  WorkItems  WorkItem?        @relation(fields: [workItemId], references: [id], onDelete: Cascade)
}

enum Type {
  TASK
  BUG
  REVIEW
  SUBISSUE
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum SprintStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
}

enum NotificationType {
  ASSIGNED_TO_ISSUE
  PROJECT_INVITE
  SPRINT_STARTED
  SPRINT_COMPLETED
}

enum StatusInSprint {
  IN_SPRINT_PLANNING
  IN_SPRINT
  IN_SPRINT_REVIEW
}

enum Role {
  SCRUM_MASTER
  PRODUCT_OWNER
  DEVELOPER
  TESTER
}
